// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Persistence.Contexts;

#nullable disable

namespace Persistence.Migrations
{
    [DbContext(typeof(BaseDbContext))]
    [Migration("20251030064358_mig-2")]
    partial class mig2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("ActionName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("ActionName");

                    b.Property<string>("ClientIp")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("ClientIp");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DeletedDate");

                    b.Property<DateTime>("OccurredOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("OccurredOn");

                    b.Property<string>("Payload")
                        .HasColumnType("text")
                        .HasColumnName("Payload");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UpdatedDate");

                    b.Property<string>("UserAgent")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)")
                        .HasColumnName("UserAgent");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("UserId");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("UserName");

                    b.HasKey("Id");

                    b.ToTable("AuditLogs", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.DeweySiniflama", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Aciklama")
                        .HasColumnType("text")
                        .HasColumnName("Aciklama");

                    b.Property<string>("Baslik")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Baslik");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DeletedDate");

                    b.Property<string>("Kod")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Kod");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UpdatedDate");

                    b.Property<Guid?>("UstSinifId")
                        .HasColumnType("uuid")
                        .HasColumnName("UstSinifId");

                    b.HasKey("Id");

                    b.HasIndex("UstSinifId");

                    b.ToTable("DeweySiniflamalar", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Etkinlik", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Aciklama")
                        .HasColumnType("text")
                        .HasColumnName("Aciklama");

                    b.Property<string>("AfisDosyasi")
                        .HasColumnType("text")
                        .HasColumnName("AfisDosyasi");

                    b.Property<DateTime>("BaslangicTarihi")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("BaslangicTarihi");

                    b.Property<string>("Baslik")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Baslik");

                    b.Property<DateTime>("BitisTarihi")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("BitisTarihi");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DeletedDate");

                    b.Property<string>("Konum")
                        .HasColumnType("text")
                        .HasColumnName("Konum");

                    b.Property<Guid>("KutuphaneId")
                        .HasColumnType("uuid")
                        .HasColumnName("KutuphaneId");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("KutuphaneId");

                    b.ToTable("Etkinlikler", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.KatalogKaydi", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("AltBaslik")
                        .HasColumnType("text")
                        .HasColumnName("AltBaslik");

                    b.Property<string>("Baski")
                        .HasColumnType("text")
                        .HasColumnName("Baski");

                    b.Property<string>("Baslik")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Baslik");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DeletedDate");

                    b.Property<Guid?>("DeweySiniflamaId")
                        .HasColumnType("uuid")
                        .HasColumnName("DeweySiniflamaId");

                    b.Property<string>("Dil")
                        .HasColumnType("text")
                        .HasColumnName("Dil");

                    b.Property<string>("Dizi")
                        .HasColumnType("text")
                        .HasColumnName("Dizi");

                    b.Property<string>("Isbn")
                        .HasColumnType("text")
                        .HasColumnName("Isbn");

                    b.Property<string>("KapakResmiYolu")
                        .HasColumnType("text")
                        .HasColumnName("KapakResmiYolu");

                    b.Property<DateTime>("KayitTarihi")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("KayitTarihi");

                    b.Property<Guid>("KutuphaneId")
                        .HasColumnType("uuid")
                        .HasColumnName("KutuphaneId");

                    b.Property<string>("Marc21Verisi")
                        .HasColumnType("text")
                        .HasColumnName("Marc21Verisi");

                    b.Property<string>("MarcAlanlari")
                        .HasColumnType("text")
                        .HasColumnName("MarcAlanlari");

                    b.Property<string>("MateryalAltTuru")
                        .HasColumnType("text")
                        .HasColumnName("MateryalAltTuru");

                    b.Property<int>("MateryalTuru")
                        .HasColumnType("integer")
                        .HasColumnName("MateryalTuru");

                    b.Property<string>("Notlar")
                        .HasColumnType("text")
                        .HasColumnName("Notlar");

                    b.Property<string>("Ozet")
                        .HasColumnType("text")
                        .HasColumnName("Ozet");

                    b.Property<bool>("RdaUyumlu")
                        .HasColumnType("boolean")
                        .HasColumnName("RdaUyumlu");

                    b.Property<int?>("SayfaSayisi")
                        .HasColumnType("integer")
                        .HasColumnName("SayfaSayisi");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UpdatedDate");

                    b.Property<string>("YayinYeri")
                        .HasColumnType("text")
                        .HasColumnName("YayinYeri");

                    b.Property<int?>("YayinYili")
                        .HasColumnType("integer")
                        .HasColumnName("YayinYili");

                    b.Property<string>("Yayinevi")
                        .HasColumnType("text")
                        .HasColumnName("Yayinevi");

                    b.Property<Guid?>("YeniKatalogTalebiId")
                        .HasColumnType("uuid")
                        .HasColumnName("YeniKatalogTalebiId");

                    b.HasKey("Id");

                    b.HasIndex("DeweySiniflamaId");

                    b.HasIndex("KutuphaneId");

                    b.HasIndex("YeniKatalogTalebiId")
                        .IsUnique();

                    b.ToTable("KatalogKayitlari", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.KatalogKaydiYazar", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DeletedDate");

                    b.Property<Guid>("KatalogKaydiId")
                        .HasColumnType("uuid")
                        .HasColumnName("KatalogKaydiId");

                    b.Property<Guid?>("OtoriteKaydiId")
                        .HasColumnType("uuid")
                        .HasColumnName("OtoriteKaydiId");

                    b.Property<int>("Rol")
                        .HasColumnType("integer")
                        .HasColumnName("Rol");

                    b.Property<int>("Sira")
                        .HasColumnType("integer")
                        .HasColumnName("Sira");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UpdatedDate");

                    b.Property<Guid>("YazarId")
                        .HasColumnType("uuid")
                        .HasColumnName("YazarId");

                    b.Property<Guid?>("YazarId1")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("KatalogKaydiId");

                    b.HasIndex("OtoriteKaydiId");

                    b.HasIndex("YazarId");

                    b.HasIndex("YazarId1");

                    b.ToTable("KatalogKaydiYazarlar", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.KatalogKonu", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DeletedDate");

                    b.Property<Guid>("KatalogKaydiId")
                        .HasColumnType("uuid")
                        .HasColumnName("KatalogKaydiId");

                    b.Property<string>("KonuBasligi")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("KonuBasligi");

                    b.Property<Guid?>("OtoriteKaydiId")
                        .HasColumnType("uuid")
                        .HasColumnName("OtoriteKaydiId");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("KatalogKaydiId");

                    b.HasIndex("OtoriteKaydiId");

                    b.ToTable("KatalogKonular", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Kutuphane", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Ad")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Ad");

                    b.Property<string>("Adres")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Adres");

                    b.Property<bool>("Aktif")
                        .HasColumnType("boolean")
                        .HasColumnName("Aktif");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DeletedDate");

                    b.Property<string>("EPosta")
                        .HasColumnType("text")
                        .HasColumnName("EPosta");

                    b.Property<string>("Il")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Ilce")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Kod")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Kod");

                    b.Property<string>("Telefon")
                        .HasColumnType("text")
                        .HasColumnName("Telefon");

                    b.Property<int>("Tip")
                        .HasColumnType("integer")
                        .HasColumnName("Tip");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("Kutuphaneler", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.KutuphaneBolumu", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Aciklama")
                        .HasColumnType("text")
                        .HasColumnName("Aciklama");

                    b.Property<string>("Ad")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Ad");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DeletedDate");

                    b.Property<Guid>("KutuphaneId")
                        .HasColumnType("uuid")
                        .HasColumnName("KutuphaneId");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("KutuphaneId");

                    b.ToTable("KutuphaneBolumler", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Materyal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DeletedDate");

                    b.Property<int>("Formati")
                        .HasColumnType("integer")
                        .HasColumnName("Formati");

                    b.Property<Guid>("KatalogKaydiId")
                        .HasColumnType("uuid")
                        .HasColumnName("KatalogKaydiId");

                    b.Property<Guid?>("KutuphaneBolumuId")
                        .HasColumnType("uuid")
                        .HasColumnName("KutuphaneBolumuId");

                    b.Property<Guid>("KutuphaneId")
                        .HasColumnType("uuid")
                        .HasColumnName("KutuphaneId");

                    b.Property<int>("MaksimumOduncSuresiGun")
                        .HasColumnType("integer")
                        .HasColumnName("MaksimumOduncSuresiGun");

                    b.Property<string>("Not")
                        .HasColumnType("text")
                        .HasColumnName("Not");

                    b.Property<bool>("RezervasyonaAcik")
                        .HasColumnType("boolean")
                        .HasColumnName("RezervasyonaAcik");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("KatalogKaydiId");

                    b.HasIndex("KutuphaneBolumuId");

                    b.HasIndex("KutuphaneId");

                    b.ToTable("Materyaller", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.MateryalEtiket", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DeletedDate");

                    b.Property<string>("Etiket")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Etiket");

                    b.Property<Guid>("MateryalId")
                        .HasColumnType("uuid")
                        .HasColumnName("MateryalId");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("MateryalId");

                    b.ToTable("MateryalEtiketler", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.MateryalFormatDetay", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DeletedDate");

                    b.Property<string>("Dil")
                        .HasColumnType("text")
                        .HasColumnName("Dil");

                    b.Property<string>("ErişimBilgisi")
                        .HasColumnType("text")
                        .HasColumnName("ErişimBilgisi");

                    b.Property<string>("FizikselTanimi")
                        .HasColumnType("text")
                        .HasColumnName("FizikselTanimi");

                    b.Property<string>("FormatBilgisi")
                        .HasColumnType("text")
                        .HasColumnName("FormatBilgisi");

                    b.Property<Guid>("KatalogKaydiId")
                        .HasColumnType("uuid")
                        .HasColumnName("KatalogKaydiId");

                    b.Property<int>("MateryalTuru")
                        .HasColumnType("integer")
                        .HasColumnName("MateryalTuru");

                    b.Property<string>("SureBilgisi")
                        .HasColumnType("text")
                        .HasColumnName("SureBilgisi");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("KatalogKaydiId");

                    b.ToTable("MateryalFormatDetaylar", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Nusha", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Barkod")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Barkod");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DeletedDate");

                    b.Property<int>("Durumu")
                        .HasColumnType("integer")
                        .HasColumnName("Durumu");

                    b.Property<DateTime>("EklenmeTarihi")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("EklenmeTarihi");

                    b.Property<Guid>("MateryalId")
                        .HasColumnType("uuid")
                        .HasColumnName("MateryalId");

                    b.Property<Guid?>("RafId")
                        .HasColumnType("uuid")
                        .HasColumnName("RafId");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("MateryalId");

                    b.HasIndex("RafId");

                    b.ToTable("Nushalar", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.OduncIslemi", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<DateTime>("AlinmaTarihi")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("AlinmaTarihi");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DeletedDate");

                    b.Property<int>("Durumu")
                        .HasColumnType("integer")
                        .HasColumnName("Durumu");

                    b.Property<decimal?>("GecikmeCezaMiktari")
                        .HasColumnType("numeric");

                    b.Property<int?>("GecikmeGunSayisi")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("IadeTarihi")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("IadeTarihi");

                    b.Property<Guid>("KullaniciId")
                        .HasColumnType("uuid")
                        .HasColumnName("KullaniciId");

                    b.Property<Guid>("KutuphaneId")
                        .HasColumnType("uuid")
                        .HasColumnName("KutuphaneId");

                    b.Property<string>("Not")
                        .HasColumnType("text")
                        .HasColumnName("Not");

                    b.Property<Guid>("NushaId")
                        .HasColumnType("uuid")
                        .HasColumnName("NushaId");

                    b.Property<DateTime>("SonTeslimTarihi")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("SonTeslimTarihi");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UpdatedDate");

                    b.Property<int>("UzatmaSayisi")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UzatmaTarihi")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("KutuphaneId");

                    b.HasIndex("NushaId");

                    b.ToTable("OduncIslemleri", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.OtoriteKaydi", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Aciklama")
                        .HasColumnType("text")
                        .HasColumnName("Aciklama");

                    b.Property<string>("AlternatifBasliklar")
                        .HasColumnType("text")
                        .HasColumnName("AlternatifBasliklar");

                    b.Property<string>("BagliTerimler")
                        .HasColumnType("text")
                        .HasColumnName("BagliTerimler");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DeletedDate");

                    b.Property<string>("HariciKayitNo")
                        .HasColumnType("text")
                        .HasColumnName("HariciKayitNo");

                    b.Property<int>("OtoriteTuru")
                        .HasColumnType("integer")
                        .HasColumnName("OtoriteTuru");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UpdatedDate");

                    b.Property<string>("YetkiliBaslik")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("YetkiliBaslik");

                    b.HasKey("Id");

                    b.ToTable("OtoriteKayitlari", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Raf", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Aciklama")
                        .HasColumnType("text")
                        .HasColumnName("Aciklama");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DeletedDate");

                    b.Property<string>("Kod")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Kod");

                    b.Property<Guid>("KutuphaneBolumuId")
                        .HasColumnType("uuid")
                        .HasColumnName("KutuphaneBolumuId");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("KutuphaneBolumuId");

                    b.ToTable("Raflar", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Rezervasyon", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DeletedDate");

                    b.Property<int>("Durumu")
                        .HasColumnType("integer")
                        .HasColumnName("Durumu");

                    b.Property<DateTime?>("HazirlanmaTarihi")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("HazirlanmaTarihi");

                    b.Property<Guid>("KullaniciId")
                        .HasColumnType("uuid")
                        .HasColumnName("KullaniciId");

                    b.Property<Guid>("KutuphaneId")
                        .HasColumnType("uuid")
                        .HasColumnName("KutuphaneId");

                    b.Property<Guid>("MateryalId")
                        .HasColumnType("uuid")
                        .HasColumnName("MateryalId");

                    b.Property<string>("Not")
                        .HasColumnType("text")
                        .HasColumnName("Not");

                    b.Property<DateTime>("TalepTarihi")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("TalepTarihi");

                    b.Property<DateTime?>("TamamlanmaTarihi")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("TamamlanmaTarihi");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("KutuphaneId");

                    b.HasIndex("MateryalId");

                    b.ToTable("Rezervasyonlar", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Security.EmailAuthenticator", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("ActivationKey")
                        .HasColumnType("text")
                        .HasColumnName("ActivationKey");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DeletedDate");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("boolean")
                        .HasColumnName("IsVerified");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UpdatedDate");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("EmailAuthenticators", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Security.OperationClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DeletedDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Name");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("OperationClaims", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Auth.Admin"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Auth.Read"
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Auth.Write"
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Auth.RevokeToken"
                        },
                        new
                        {
                            Id = 6,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "OperationClaims.Admin"
                        },
                        new
                        {
                            Id = 7,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "OperationClaims.Read"
                        },
                        new
                        {
                            Id = 8,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "OperationClaims.Write"
                        },
                        new
                        {
                            Id = 9,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "OperationClaims.Create"
                        },
                        new
                        {
                            Id = 10,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "OperationClaims.Update"
                        },
                        new
                        {
                            Id = 11,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "OperationClaims.Delete"
                        },
                        new
                        {
                            Id = 12,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "UserOperationClaims.Admin"
                        },
                        new
                        {
                            Id = 13,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "UserOperationClaims.Read"
                        },
                        new
                        {
                            Id = 14,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "UserOperationClaims.Write"
                        },
                        new
                        {
                            Id = 15,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "UserOperationClaims.Create"
                        },
                        new
                        {
                            Id = 16,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "UserOperationClaims.Update"
                        },
                        new
                        {
                            Id = 17,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "UserOperationClaims.Delete"
                        },
                        new
                        {
                            Id = 18,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Users.Admin"
                        },
                        new
                        {
                            Id = 19,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Users.Read"
                        },
                        new
                        {
                            Id = 20,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Users.Write"
                        },
                        new
                        {
                            Id = 21,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Users.Create"
                        },
                        new
                        {
                            Id = 22,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Users.Update"
                        },
                        new
                        {
                            Id = 23,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Users.Delete"
                        },
                        new
                        {
                            Id = 24,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Role.SistemYoneticisi"
                        },
                        new
                        {
                            Id = 25,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Role.BakanlikYetkilisi"
                        },
                        new
                        {
                            Id = 26,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Role.IlYetkilisi"
                        },
                        new
                        {
                            Id = 27,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Role.IlceYetkilisi"
                        },
                        new
                        {
                            Id = 28,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Role.OkulKutuphaneYoneticisi"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Security.OtpAuthenticator", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DeletedDate");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("boolean")
                        .HasColumnName("IsVerified");

                    b.Property<byte[]>("SecretKey")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("SecretKey");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UpdatedDate");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("OtpAuthenticators", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Security.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("CreatedByIp")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("CreatedByIp");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DeletedDate");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ExpiresDate");

                    b.Property<string>("ReasonRevoked")
                        .HasColumnType("text")
                        .HasColumnName("ReasonRevoked");

                    b.Property<string>("ReplacedByToken")
                        .HasColumnType("text")
                        .HasColumnName("ReplacedByToken");

                    b.Property<string>("RevokedByIp")
                        .HasColumnType("text")
                        .HasColumnName("RevokedByIp");

                    b.Property<DateTime?>("RevokedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("RevokedDate");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Token");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UpdatedDate");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Security.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<int>("AuthenticatorType")
                        .HasColumnType("integer")
                        .HasColumnName("AuthenticatorType");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DeletedDate");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("FirstName");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("LastName");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("PasswordHash");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("PasswordSalt");

                    b.Property<string>("SorumluIlKodu")
                        .HasColumnType("text")
                        .HasColumnName("SorumluIlKodu");

                    b.Property<string>("SorumluIlceKodu")
                        .HasColumnType("text")
                        .HasColumnName("SorumluIlceKodu");

                    b.Property<Guid?>("SorumluKutuphaneId")
                        .HasColumnType("uuid")
                        .HasColumnName("SorumluKutuphaneId");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean")
                        .HasColumnName("Status");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("d22496aa-4ed9-4c1e-9fd0-06c27dbcdd79"),
                            AuthenticatorType = 0,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "narch@kodlama.io",
                            FirstName = "",
                            LastName = "",
                            PasswordHash = new byte[] { 112, 89, 108, 13, 226, 36, 98, 10, 201, 152, 110, 82, 101, 184, 93, 86, 25, 91, 48, 123, 208, 74, 53, 190, 202, 78, 220, 16, 236, 163, 124, 56, 26, 160, 140, 105, 32, 121, 55, 170, 78, 40, 118, 183, 103, 255, 80, 148, 72, 251, 248, 36, 107, 26, 220, 15, 120, 96, 125, 80, 132, 86, 27, 199 },
                            PasswordSalt = new byte[] { 251, 252, 240, 150, 164, 86, 252, 23, 125, 214, 226, 217, 170, 248, 113, 158, 106, 216, 227, 20, 97, 58, 54, 210, 90, 237, 139, 214, 96, 252, 194, 233, 117, 41, 69, 89, 227, 80, 222, 119, 221, 22, 108, 8, 227, 120, 181, 176, 86, 247, 92, 34, 96, 16, 115, 55, 111, 4, 3, 198, 251, 217, 94, 80, 18, 41, 33, 243, 225, 28, 76, 139, 44, 198, 2, 215, 55, 205, 63, 243, 202, 145, 191, 232, 59, 108, 254, 6, 165, 251, 161, 237, 165, 67, 22, 205, 86, 209, 210, 250, 149, 25, 8, 178, 239, 237, 124, 125, 75, 40, 146, 255, 234, 127, 127, 134, 6, 10, 136, 233, 220, 192, 188, 75, 79, 214, 137, 225 },
                            Status = true
                        });
                });

            modelBuilder.Entity("Domain.Entities.Security.UserOperationClaim", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DeletedDate");

                    b.Property<int>("OperationClaimId")
                        .HasColumnType("integer")
                        .HasColumnName("OperationClaimId");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UpdatedDate");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("UserId");

                    b.HasKey("Id");

                    b.HasIndex("OperationClaimId");

                    b.HasIndex("UserId");

                    b.ToTable("UserOperationClaims", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("6148d16a-a58d-4dc5-a73f-ba6ead9bc49c"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OperationClaimId = 1,
                            UserId = new Guid("d22496aa-4ed9-4c1e-9fd0-06c27dbcdd79")
                        },
                        new
                        {
                            Id = new Guid("2cd88658-4f63-4241-b950-dab6eb5e8391"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OperationClaimId = 24,
                            UserId = new Guid("d22496aa-4ed9-4c1e-9fd0-06c27dbcdd79")
                        });
                });

            modelBuilder.Entity("Domain.Entities.Yazar", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Aciklama")
                        .HasColumnType("text")
                        .HasColumnName("Aciklama");

                    b.Property<string>("AdSoyad")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("AdSoyad");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DeletedDate");

                    b.Property<DateTime?>("DogumTarihi")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DogumTarihi");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UpdatedDate");

                    b.Property<string>("Uyruk")
                        .HasColumnType("text")
                        .HasColumnName("Uyruk");

                    b.HasKey("Id");

                    b.ToTable("Yazarlar", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.YeniKatalogTalebi", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Aciklama")
                        .HasColumnType("text")
                        .HasColumnName("Aciklama");

                    b.Property<string>("AltBaslik")
                        .HasColumnType("text")
                        .HasColumnName("AltBaslik");

                    b.Property<string>("Baslik")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Baslik");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DeletedDate");

                    b.Property<string>("Dil")
                        .HasColumnType("text")
                        .HasColumnName("Dil");

                    b.Property<int>("Durum")
                        .HasColumnType("integer")
                        .HasColumnName("Durum");

                    b.Property<string>("Isbn")
                        .HasColumnType("text")
                        .HasColumnName("Isbn");

                    b.Property<string>("Issn")
                        .HasColumnType("text")
                        .HasColumnName("Issn");

                    b.Property<Guid?>("KatalogKaydiId")
                        .HasColumnType("uuid")
                        .HasColumnName("KatalogKaydiId");

                    b.Property<string>("MateryalAltTuru")
                        .HasColumnType("text")
                        .HasColumnName("MateryalAltTuru");

                    b.Property<string>("MateryalTuru")
                        .HasColumnType("text")
                        .HasColumnName("MateryalTuru");

                    b.Property<string>("RedGerekcesi")
                        .HasColumnType("text")
                        .HasColumnName("RedGerekcesi");

                    b.Property<DateTime?>("SonGuncellemeTarihi")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("SonGuncellemeTarihi");

                    b.Property<Guid>("TalepEdenKutuphaneId")
                        .HasColumnType("uuid")
                        .HasColumnName("TalepEdenKutuphaneId");

                    b.Property<DateTime>("TalepTarihi")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("TalepTarihi");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UpdatedDate");

                    b.Property<string>("YayinYeri")
                        .HasColumnType("text")
                        .HasColumnName("YayinYeri");

                    b.Property<int?>("YayinYili")
                        .HasColumnType("integer")
                        .HasColumnName("YayinYili");

                    b.Property<string>("Yayinevi")
                        .HasColumnType("text")
                        .HasColumnName("Yayinevi");

                    b.Property<string>("YazarMetni")
                        .HasColumnType("text")
                        .HasColumnName("YazarMetni");

                    b.HasKey("Id");

                    b.HasIndex("TalepEdenKutuphaneId");

                    b.ToTable("YeniKatalogTalepleri", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.DeweySiniflama", b =>
                {
                    b.HasOne("Domain.Entities.DeweySiniflama", "UstSinif")
                        .WithMany("AltSiniflar")
                        .HasForeignKey("UstSinifId");

                    b.Navigation("UstSinif");
                });

            modelBuilder.Entity("Domain.Entities.Etkinlik", b =>
                {
                    b.HasOne("Domain.Entities.Kutuphane", "Kutuphane")
                        .WithMany("Etkinlikler")
                        .HasForeignKey("KutuphaneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Kutuphane");
                });

            modelBuilder.Entity("Domain.Entities.KatalogKaydi", b =>
                {
                    b.HasOne("Domain.Entities.DeweySiniflama", "DeweySiniflama")
                        .WithMany("KatalogKayitlari")
                        .HasForeignKey("DeweySiniflamaId");

                    b.HasOne("Domain.Entities.Kutuphane", "Kutuphane")
                        .WithMany("KatalogKayitlari")
                        .HasForeignKey("KutuphaneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.YeniKatalogTalebi", "YeniKatalogTalebi")
                        .WithOne("KatalogKaydi")
                        .HasForeignKey("Domain.Entities.KatalogKaydi", "YeniKatalogTalebiId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("DeweySiniflama");

                    b.Navigation("Kutuphane");

                    b.Navigation("YeniKatalogTalebi");
                });

            modelBuilder.Entity("Domain.Entities.KatalogKaydiYazar", b =>
                {
                    b.HasOne("Domain.Entities.KatalogKaydi", "KatalogKaydi")
                        .WithMany("KatalogYazarlar")
                        .HasForeignKey("KatalogKaydiId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.OtoriteKaydi", "OtoriteKaydi")
                        .WithMany("IlgiliYazarKayitlari")
                        .HasForeignKey("OtoriteKaydiId");

                    b.HasOne("Domain.Entities.Yazar", "Yazar")
                        .WithMany()
                        .HasForeignKey("YazarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Yazar", null)
                        .WithMany("KatalogKaydiYazarlar")
                        .HasForeignKey("YazarId1");

                    b.Navigation("KatalogKaydi");

                    b.Navigation("OtoriteKaydi");

                    b.Navigation("Yazar");
                });

            modelBuilder.Entity("Domain.Entities.KatalogKonu", b =>
                {
                    b.HasOne("Domain.Entities.KatalogKaydi", "KatalogKaydi")
                        .WithMany("Konular")
                        .HasForeignKey("KatalogKaydiId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.OtoriteKaydi", "OtoriteKaydi")
                        .WithMany("KatalogKonulari")
                        .HasForeignKey("OtoriteKaydiId");

                    b.Navigation("KatalogKaydi");

                    b.Navigation("OtoriteKaydi");
                });

            modelBuilder.Entity("Domain.Entities.KutuphaneBolumu", b =>
                {
                    b.HasOne("Domain.Entities.Kutuphane", "Kutuphane")
                        .WithMany("Bolumler")
                        .HasForeignKey("KutuphaneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Kutuphane");
                });

            modelBuilder.Entity("Domain.Entities.Materyal", b =>
                {
                    b.HasOne("Domain.Entities.KatalogKaydi", "KatalogKaydi")
                        .WithMany("Materyaller")
                        .HasForeignKey("KatalogKaydiId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.KutuphaneBolumu", "Bolum")
                        .WithMany("Materyaller")
                        .HasForeignKey("KutuphaneBolumuId");

                    b.HasOne("Domain.Entities.Kutuphane", "Kutuphane")
                        .WithMany("Materyaller")
                        .HasForeignKey("KutuphaneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bolum");

                    b.Navigation("KatalogKaydi");

                    b.Navigation("Kutuphane");
                });

            modelBuilder.Entity("Domain.Entities.MateryalEtiket", b =>
                {
                    b.HasOne("Domain.Entities.Materyal", "Materyal")
                        .WithMany("Etiketler")
                        .HasForeignKey("MateryalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Materyal");
                });

            modelBuilder.Entity("Domain.Entities.MateryalFormatDetay", b =>
                {
                    b.HasOne("Domain.Entities.KatalogKaydi", "KatalogKaydi")
                        .WithMany("FormatDetaylari")
                        .HasForeignKey("KatalogKaydiId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("KatalogKaydi");
                });

            modelBuilder.Entity("Domain.Entities.Nusha", b =>
                {
                    b.HasOne("Domain.Entities.Materyal", "Materyal")
                        .WithMany("Nushalar")
                        .HasForeignKey("MateryalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Raf", "Raf")
                        .WithMany("Nushalar")
                        .HasForeignKey("RafId");

                    b.Navigation("Materyal");

                    b.Navigation("Raf");
                });

            modelBuilder.Entity("Domain.Entities.OduncIslemi", b =>
                {
                    b.HasOne("Domain.Entities.Kutuphane", "Kutuphane")
                        .WithMany()
                        .HasForeignKey("KutuphaneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Nusha", "Nusha")
                        .WithMany("OduncIslemleri")
                        .HasForeignKey("NushaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Kutuphane");

                    b.Navigation("Nusha");
                });

            modelBuilder.Entity("Domain.Entities.Raf", b =>
                {
                    b.HasOne("Domain.Entities.KutuphaneBolumu", "Bolum")
                        .WithMany("Raflar")
                        .HasForeignKey("KutuphaneBolumuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bolum");
                });

            modelBuilder.Entity("Domain.Entities.Rezervasyon", b =>
                {
                    b.HasOne("Domain.Entities.Kutuphane", "Kutuphane")
                        .WithMany()
                        .HasForeignKey("KutuphaneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Materyal", "Materyal")
                        .WithMany()
                        .HasForeignKey("MateryalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Kutuphane");

                    b.Navigation("Materyal");
                });

            modelBuilder.Entity("Domain.Entities.Security.EmailAuthenticator", b =>
                {
                    b.HasOne("Domain.Entities.Security.User", "User")
                        .WithMany("EmailAuthenticators")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Security.OtpAuthenticator", b =>
                {
                    b.HasOne("Domain.Entities.Security.User", "User")
                        .WithMany("OtpAuthenticators")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Security.RefreshToken", b =>
                {
                    b.HasOne("Domain.Entities.Security.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Security.UserOperationClaim", b =>
                {
                    b.HasOne("Domain.Entities.Security.OperationClaim", "OperationClaim")
                        .WithMany()
                        .HasForeignKey("OperationClaimId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Security.User", "User")
                        .WithMany("UserOperationClaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OperationClaim");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.YeniKatalogTalebi", b =>
                {
                    b.HasOne("Domain.Entities.Kutuphane", "TalepEdenKutuphane")
                        .WithMany("YeniKatalogTalepleri")
                        .HasForeignKey("TalepEdenKutuphaneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TalepEdenKutuphane");
                });

            modelBuilder.Entity("Domain.Entities.DeweySiniflama", b =>
                {
                    b.Navigation("AltSiniflar");

                    b.Navigation("KatalogKayitlari");
                });

            modelBuilder.Entity("Domain.Entities.KatalogKaydi", b =>
                {
                    b.Navigation("FormatDetaylari");

                    b.Navigation("KatalogYazarlar");

                    b.Navigation("Konular");

                    b.Navigation("Materyaller");
                });

            modelBuilder.Entity("Domain.Entities.Kutuphane", b =>
                {
                    b.Navigation("Bolumler");

                    b.Navigation("Etkinlikler");

                    b.Navigation("KatalogKayitlari");

                    b.Navigation("Materyaller");

                    b.Navigation("YeniKatalogTalepleri");
                });

            modelBuilder.Entity("Domain.Entities.KutuphaneBolumu", b =>
                {
                    b.Navigation("Materyaller");

                    b.Navigation("Raflar");
                });

            modelBuilder.Entity("Domain.Entities.Materyal", b =>
                {
                    b.Navigation("Etiketler");

                    b.Navigation("Nushalar");
                });

            modelBuilder.Entity("Domain.Entities.Nusha", b =>
                {
                    b.Navigation("OduncIslemleri");
                });

            modelBuilder.Entity("Domain.Entities.OtoriteKaydi", b =>
                {
                    b.Navigation("IlgiliYazarKayitlari");

                    b.Navigation("KatalogKonulari");
                });

            modelBuilder.Entity("Domain.Entities.Raf", b =>
                {
                    b.Navigation("Nushalar");
                });

            modelBuilder.Entity("Domain.Entities.Security.User", b =>
                {
                    b.Navigation("EmailAuthenticators");

                    b.Navigation("OtpAuthenticators");

                    b.Navigation("RefreshTokens");

                    b.Navigation("UserOperationClaims");
                });

            modelBuilder.Entity("Domain.Entities.Yazar", b =>
                {
                    b.Navigation("KatalogKaydiYazarlar");
                });

            modelBuilder.Entity("Domain.Entities.YeniKatalogTalebi", b =>
                {
                    b.Navigation("KatalogKaydi");
                });
#pragma warning restore 612, 618
        }
    }
}
